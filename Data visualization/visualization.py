# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AtZGXegsPnyNZdHAmF1QxtK0w22hWpFx

# Import numpy, pandas, and matplotlib.pyplot
"""

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import matplotlib.ticker as tick

"""# Read the final_dataset csv file"""

from google.colab import drive
drive.mount('/content/drive')

final_dts = pd.read_csv ('/content/drive/MyDrive/Colab Notebooks/final-project-dataset/final_dataset.csv')
final_dts

final_dts.info()

"""# **Visualizations**

# Q6 and Q25(a, b, c, d, e, f, g, h, i, and j)-  rate of emotions felt based on the field of study

Dataframe of Q6 and Q25
"""

q6_q25_df = final_dts[['Q6', 'Q25a', 'Q25b', 'Q25c', 'Q25d', 'Q25e', 'Q25f', 'Q25g', 'Q25h', 'Q25i', 'Q25j']].sort_values(by='Q6')
q6_q25_df.set_index(['Q6'], inplace=True)
q6_q25_df

#breaking down dataframe based on groups
art_df = q6_q25_df.loc[final_dts['Q6'] == 1]
social_df = q6_q25_df.loc[final_dts['Q6'] == 2]
technical_df = q6_q25_df.loc[3]
natural_df = q6_q25_df.loc[final_dts['Q6'] == 4]
technical_df

"""Preparing variables to be used in plotting

Computing the composition of each Q25 emotion based on art_df (for testing)
"""

q25 = ['Q25a', 'Q25b', 'Q25c', 'Q25d', 'Q25e', 'Q25f', 'Q25g', 'Q25h', 'Q25i', 'Q25j']
scale_schema = {
    '1.0': 'Never',
    '2.0': 'Rarely',
    '3.0': 'Sometimes',
    '4.0': 'Often',
    '5.0': 'Always'
}
q25_reponses_dict = {
    'Never': [],
    'Rarely': [],
    'Sometimes': [],
    'Often': [],
    'Always': [],
}

index = art_df[q25[0]].value_counts(normalize=True).index
values = art_df[q25[0]].value_counts(normalize=True).values
portions = [round(x*100,2) for x in values] #multiply by 100 each values

portions

for q in q25:
  index = art_df[q].value_counts(normalize=True).index.astype(str)
  values = art_df[q].value_counts(normalize=True).values
  portions = [round(x*100, 2) for x in values] #multiply by 100 each values
  for key, val in zip(index, portions):
    q25_reponses_dict[scale_schema[key]].append(val)

index[0]

summary_df = pd.DataFrame(q25_reponses_dict, index=q25)
summary_df

"""Likert Scales and Labels"""

q25_scale_dict = {
              '1.0': "Never", 
              '2.0': "Rarely", 
              '3.0': "Sometimes", 
              '4.0': "Often", 
              '5.0':"Always"
            }


q25_scale_list = ["Never", "Rarely", "Sometimes", "Often", "Always"]

q25_labels = ['Joyful', 'Hopeful', 'Proud', 'Frustrated', 'Angry', 'Anxious', 'Ashamed', 'Relieved', 'Hopeless', 'Bored']

#for aggregating the q25
#returns new dataframe of aggregated q25 responses 
def aggregate_q25(df, **likert_scale):
  q25_responses_dict = {}
  df_columns = list(df.columns)
  #print(df_columns)
  #populates the dict with likert scale properties
  for scale in likert_scale.values():
    q25_responses_dict[scale] = []
    #print(q25_responses_dict)

  #accumulates each percentage of likert scale per question/emotion
  for col in df_columns:
    #print(col)
    index = df[col].value_counts(normalize=True).index.astype('str') #contains index from the result of value_counts
    values = df[col].value_counts(normalize=True).values #contains value from the result of value_counts
    portions = [round(x*100, 2) for x in values] #multiply by 100 each values
    #print(df[col].value_counts(normalize=True))
    #print(index)
    #print(portions)

    #populates each scale
    for key, val in zip(index, portions): 
      q25_responses_dict[likert_scale[key]].append(val)

  #print(q25_responses_dict)
  
  return pd.DataFrame(q25_responses_dict, index=df_columns)

def diverging_stacked_plotter(ax, df, likert_scale, labels, **dict_params):
  #color_palettes
  #blue to green
  q25_color_palettes = ['#F28B50', '#F2C0A2', '#ABABAB', '#A2D4F2',  '#3D9DD9'] 
  color_in_use = q25_color_palettes

  #cumulative sum of df
  cumsum_df = df.cumsum(axis=1)
  offsets = np.add(cumsum_df['Rarely'], df['Sometimes']/2) if 'Never' in likert_scale else cumsum_df["Once a week"]
  ylabel = 'Emotions' if 'Never' in likert_scale else 'People to communicate with through online'

  #formula of left value of each bar 
  #left = cumsum_of_portion - portion - offset

  for index, scale in enumerate(likert_scale):
    portion = df[scale]
    starts = cumsum_df[scale] - portion - offsets
    stacks = ax.barh(labels, portion, left=starts, label=scale, color=color_in_use[index])
    
  #zero reference line
  ax.axvline(0, linestyle='-', color='black', alpha=.25)

  #only in recent versions
  #ax.bar_label(p1, label_type='center')
  #ax.bar_label(p2, label_type='center')
  #ax.bar_label(p3, label_type='center')
  #ax.bar_label(p4, label_type='center')
  #ax.bar_label(p5, label_type='center')

  ax.spines['right'].set_visible(False)
  ax.spines['top'].set_visible(False)
  ax.spines['left'].set_visible(False)
  ax.spines['bottom'].set_visible(True)

  ax.yaxis.grid(False)
  ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
  ax.set_axisbelow(True)

  #x-axis
  ax.set_xlim(-100, 100)
  ax.set_xticks(np.arange(-100, 101, 10))
  ax.xaxis.set_major_formatter(tick.FuncFormatter(lambda x, pos: str(abs(int(x)))))

  
  ax.set_ylabel('Emotions', fontsize=13)
  ax.set_xlabel('Rate', fontsize=13)

  ax.set_ylabel(ylabel)

  ax.set_title(dict_params['title'], loc='center', fontsize=18, fontweight='bold')
  ax.legend(bbox_to_anchor=(0.5,-0.25), loc='lower center', ncol=6, fontsize=12)

#for stacked column plotting (only works in q25)
def stacked_bar_plotter(ax, df, **dict_params):
  b_sometimes = list(np.add(df['Never'], df['Rarely']))
  b_often = list(np.add(b_sometimes, df['Sometimes']))
  b_always = list(np.add(b_often, df['Often']))

  p1 = ax.barh(labels, df['Never'], dict_params['width'], label="Never")
  p2 = ax.barh(labels, df['Rarely'], dict_params['width'], left=df['Never'], label="Rarely")
  p3 = ax.barh(labels, df['Sometimes'], dict_params['width'], left=b_sometimes, label="Sometimes")
  p4 = ax.barh(labels, df['Often'], dict_params['width'], left=b_often, label="Often")
  p5 = ax.barh(labels, df['Always'], dict_params['width'], left=b_always, label="Always")

  #only in recent versions
  #ax.bar_label(p1, label_type='center')
  #ax.bar_label(p2, label_type='center')
  #ax.bar_label(p3, label_type='center')
  #ax.bar_label(p4, label_type='center')
  #ax.bar_label(p5, label_type='center')

  ax.spines['right'].set_visible(False)
  ax.spines['top'].set_visible(False)

  ax.set_xlabel('Rate')
  ax.set_ylabel('Emotions')
  ax.set_title(dict_params['title'])
  ax.legend()

summary_art_df = aggregate_q25(art_df, **q25_scale_dict)
summary_art_df

summary_social_df = aggregate_q25(social_df, **q25_scale_dict)
summary_social_df

summary_technical_df = aggregate_q25(technical_df, **q25_scale_dict)
summary_technical_df

summary_natural_df = aggregate_q25(natural_df, **q25_scale_dict)
summary_natural_df

params_dict = {
    'title': 'Emotions Rate felt by Arts and Humanities Students',
}
fig, ax = plt.subplots()
fig.set_size_inches(18, 5.5, forward=True)

diverging_stacked_plotter(ax, summary_art_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_arts.png', bbox_inches='tight', pad_inches=0.5)

params_dict = {
    'title': 'Emotions Rate felt by Social Science Students',
}
fig, ax = plt.subplots()
fig.set_size_inches(18, 5.5, forward=True)

diverging_stacked_plotter(ax, summary_social_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_social.png', bbox_inches='tight', pad_inches=0.5)

params_dict = {
    'title': 'Emotions Rate felt by Technical Students',
}
fig, ax = plt.subplots()
fig.set_size_inches(18, 5.5, forward=True)

diverging_stacked_plotter(ax, summary_technical_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_tech.png', bbox_inches='tight', pad_inches=0.5)

params_dict = {
    'title': 'Emotions Rate felt by Natural and Life Science Students',
}
fig, ax = plt.subplots()
fig.set_size_inches(18, 5.5, forward=True)

diverging_stacked_plotter(ax, summary_natural_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_natural.png', bbox_inches='tight', pad_inches=0.5)

"""#Q7 and Q25(a, b, c, d, e, f, g, h, i, and j)- rate of emotions felt based on the age bracket

Age grouping:  
18 - 19 years old  
20 - 21 years old  
22 - 24 years old  
25 years old and older

Converting age into int dtype
"""

final_dts['Q7'].unique()

final_dts['Q7'].dtype

final_dts['Q7'] = final_dts['Q7'].astype('int64')
final_dts['Q7'].dtype

final_dts['Q7'].unique()

"""Dataframe of Q7 and Q25

"""

q7_q25_df = final_dts[['Q7', 'Q25a', 'Q25b', 'Q25c', 'Q25d', 'Q25e', 'Q25f', 'Q25g', 'Q25h', 'Q25i', 'Q25j']].sort_values(by='Q7')
q7_q25_df.set_index(['Q7'], inplace=True)
q7_q25_df

#breaking down dataframe based on age groups
age_18_to_19_df = q7_q25_df.loc[18:19]
age_20_to_21_df = q7_q25_df.loc[20:21]
age_22_to_24_df = q7_q25_df.loc[22:24]
age_25_older_df = q7_q25_df.loc[25:]

age_25_older_df

"""Emotion rate based within 18 to 19 age

Preparing variables to be used in plotting

Computing the composition of each Q25 emotion based on 18 and 19 (for testing)
"""

q25 = ['Q25a', 'Q25b', 'Q25c', 'Q25d', 'Q25e', 'Q25f', 'Q25g', 'Q25h', 'Q25i', 'Q25j']
scale_schema = {
    '1.0': 'Never',
    '2.0': 'Rarely',
    '3.0': 'Sometimes',
    '4.0': 'Often',
    '5.0': 'Always'
}
q25_reponses_dict = {
    'Never': [],
    'Rarely': [],
    'Sometimes': [],
    'Often': [],
    'Always': [],
}

index = age_22_to_24_df[q25[0]].value_counts(normalize=True).index
values = age_22_to_24_df[q25[0]].value_counts(normalize=True).values
portions = [round(x*100,2) for x in values] #multiply by 100 each values

portions

for q in q25:
  index = age_22_to_24_df[q].value_counts(normalize=True).index.astype(str)
  values = age_22_to_24_df[q].value_counts(normalize=True).values
  portions = [round(x*100, 2) for x in values] #multiply by 100 each values
  for key, val in zip(index, portions):
    q25_reponses_dict[scale_schema[key]].append(val)

index[0]

summary_df = pd.DataFrame(q25_reponses_dict, index=q25)
summary_df

"""Likert scale and labels"""

q25_scale_dict = {
              '1.0': "Never", 
              '2.0': "Rarely", 
              '3.0': "Sometimes", 
              '4.0': "Often", 
              '5.0':"Always"
            }
q23_scale_dict = {
              '1.0': "Not at all", 
              '2.0': "Two or three times a month", 
              '3.0': "Once a week", 
              '4.0': "Several times a week", 
              '5.0': "Once a day", 
              '6.0': "Several times a day"
            }

q25_scale_list = ["Never", "Rarely", "Sometimes", "Often", "Always"]
q23_scale_list = ["Not at all", "Two or three times a month", "Once a week", "Several times a week", "Once a day", "Several times a day"]

q25_labels = ['Joyful', 'Hopeful', 'Proud', 'Frustrated', 'Angry', 'Anxious', 'Ashamed', 'Relieved', 'Hopeless', 'Bored']
q23_labels = ['Close family member', 'More distant family member', 'Close friend', 'Someone I live with (e.g. roommate)', 'Neighbours', 'Colleague from my course', 'Lecturer', 'Administrative staff', 'Voluntary organizations', 'Social networks']

"""Functions"""

#for aggregating the q25
#returns new dataframe of aggregated q25 responses 
def aggregate_q25(df, **likert_scale):
  q25_responses_dict = {}
  df_columns = list(df.columns)
  #print(df_columns)
  #populates the dict with likert scale properties
  for scale in likert_scale.values():
    q25_responses_dict[scale] = []
    #print(q25_responses_dict)

  #accumulates each percentage of likert scale per question/emotion
  for col in df_columns:
    #print(col)
    index = df[col].value_counts(normalize=True).index.astype('str') #contains index from the result of value_counts
    values = df[col].value_counts(normalize=True).values #contains value from the result of value_counts
    portions = [round(x*100, 2) for x in values] #multiply by 100 each values
    #print(df[col].value_counts(normalize=True))
    #print(index)
    #print(portions)

    #populates each scale
    for key, val in zip(index, portions): 
      q25_responses_dict[likert_scale[key]].append(val)

  #print(q25_responses_dict)
  
  return pd.DataFrame(q25_responses_dict, index=df_columns)

def diverging_stacked_plotter(ax, df, likert_scale, labels, **dict_params):
  #color_palettes
  #blue to green
  q25_color_palettes = ['#1261a0', '#58cced', '#e0e0e0', '#5ced73',  '#00c04b'] 
  q23_color_palletes = ['#03a9f4', '#4fc3f7', '#9addfb', '#c9f1c9', '#a0e7a0', '#77dd77']
  color_in_use = q25_color_palettes if 'Never' in likert_scale else q23_color_palletes


  #cumulative sum of df
  cumsum_df = df.cumsum(axis=1)
  offsets = np.add(cumsum_df['Rarely'], df['Sometimes']/2) if 'Never' in likert_scale else cumsum_df["Once a week"]
  ylabel = 'Emotions' if 'Never' in likert_scale else 'People to communicate with through online'

  #formula of left value of each bar 
  #left = cumsum_of_portion - portion - offset

  for index, scale in enumerate(likert_scale):
    portion = df[scale]
    starts = cumsum_df[scale] - portion - offsets
    stacks = ax.barh(labels, portion, left=starts, label=scale, color=color_in_use[index])
    
  #zero reference line
  ax.axvline(0, linestyle='--', color='black', alpha=.25)

  #only in recent versions
  #ax.bar_label(p1, label_type='center')
  #ax.bar_label(p2, label_type='center')
  #ax.bar_label(p3, label_type='center')
  #ax.bar_label(p4, label_type='center')
  #ax.bar_label(p5, label_type='center')

  ax.spines['right'].set_visible(False)
  ax.spines['top'].set_visible(False)
  ax.spines['left'].set_visible(False)
  ax.spines['bottom'].set_visible(True)

  ax.yaxis.grid(False)
  ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
  ax.set_axisbelow(True)

  #x-axis
  ax.set_xlim(-100, 100)
  ax.set_xticks(np.arange(-100, 101, 10))
  ax.xaxis.set_major_formatter(tick.FuncFormatter(lambda x, pos: str(abs(int(x)))))

  
  ax.set_ylabel('Emotions', fontsize=13)
  ax.set_xlabel('Rate', fontsize=13)

  ax.set_ylabel(ylabel)

  ax.set_title(dict_params['title'], loc='center', fontsize=18, fontweight='bold')
  ax.legend(bbox_to_anchor=(0.5,-0.25), loc='lower center', ncol=6, fontsize=12)

#for stacked column plotting (only works in q25)
def stacked_bar_plotter(ax, df, **dict_params):
  b_sometimes = list(np.add(df['Never'], df['Rarely']))
  b_often = list(np.add(b_sometimes, df['Sometimes']))
  b_always = list(np.add(b_often, df['Often']))

  p1 = ax.barh(labels, df['Never'], dict_params['width'], label="Never")
  p2 = ax.barh(labels, df['Rarely'], dict_params['width'], left=df['Never'], label="Rarely")
  p3 = ax.barh(labels, df['Sometimes'], dict_params['width'], left=b_sometimes, label="Sometimes")
  p4 = ax.barh(labels, df['Often'], dict_params['width'], left=b_often, label="Often")
  p5 = ax.barh(labels, df['Always'], dict_params['width'], left=b_always, label="Always")

  #only in recent versions
  #ax.bar_label(p1, label_type='center')
  #ax.bar_label(p2, label_type='center')
  #ax.bar_label(p3, label_type='center')
  #ax.bar_label(p4, label_type='center')
  #ax.bar_label(p5, label_type='center')

  ax.spines['right'].set_visible(False)
  ax.spines['top'].set_visible(False)

  ax.set_xlabel('Rate')
  ax.set_ylabel('Emotions')
  ax.set_title(dict_params['title'])
  ax.legend()

"""18 to 19 Years Old Emotion Rate

"""

summary_18_19_df = aggregate_q25(age_18_to_19_df, **q25_scale_dict)
summary_18_19_df

params_dict = {
    'title': 'Rate of Emotions felt by 18 and 19 Years Old College Students',
}

fig, ax = plt.subplots()
fig.set_size_inches(16, 5, forward=True)
diverging_stacked_plotter(ax, summary_18_19_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_18_19.png', bbox_inches='tight', pad_inches=0.5)

"""20-21 Years Old Emotion Rate"""

summary_20_21_df = aggregate_q25(age_20_to_21_df, **q25_scale_dict)
summary_20_21_df

params_dict = {
    'title': 'Rate of Emotions felt by 20 and 21 Years Old College Students',
}

fig, ax = plt.subplots()
fig.set_size_inches(16, 5, forward=True)
diverging_stacked_plotter(ax, summary_20_21_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_20_21.png', bbox_inches='tight', pad_inches=0.5)

"""22-24 Years Old Emotion Rate"""

summary_22_24_df = aggregate_q25(age_22_to_24_df, **q25_scale_dict)
summary_22_24_df

params_dict = {
    'title': 'Rate of Emotions felt by 22 to 24 Years Old College Students',
}

fig, ax = plt.subplots()
fig.set_size_inches(16, 5, forward=True)
diverging_stacked_plotter(ax, summary_22_24_df, q25_scale_list, q25_labels, **params_dict)

"""25 Years Old and Older Emotion Rate"""

summary_25_older_df = aggregate_q25(age_25_older_df, **q25_scale_dict)
summary_25_older_df

params_dict = {
    'title': 'Rate of Emotions felt by 25 Years Old and Older College Students',
}

fig, ax = plt.subplots()
fig.set_size_inches(16, 5, forward=True)
diverging_stacked_plotter(ax, summary_25_older_df, q25_scale_list, q25_labels, **params_dict)
plt.savefig('emotion_rate_25_older.png', bbox_inches='tight', pad_inches=0.5)

"""# Q17- workload rate of students during online setup compared to on-site classes"""

Q17_workload = final_dts

Q17_workload_rate = Q17_workload ['Q17']
Q17_data = pd.DataFrame(Q17_workload_rate)
Q17_result = Q17_data.value_counts(sort=False)
print(Q17_result)

# setting the workload rate at x axis
workload_rate=['Significantly smaller', 'Smaller', 'The same', 'Larger', 'Significantly larger']

# giving the values against each value at y axis
workload_result=[91,156,197,1017,139]

fig, ax = plt.subplots(figsize=(13,7))
plt.bar(workload_rate, workload_result, color=['#77C2FE', '#249CFF', '#1578CF', '#0A579E', '#003870'], width=0.9)

plt.ylim(0, 1200)
plt.yticks(np.arange(0, 1201, 200))

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(True)

ax.yaxis.grid(True, which='major', color='grey', linestyle='dotted')
ax.xaxis.grid(False)
ax.set_axisbelow(True)

# setting labels
plt.xlabel("Rate", fontsize=12)
plt.ylabel("Responses", fontsize=12)  
plt.title("Students' Workload Rate in Online Learning Setup", loc='center', fontsize=18, fontweight='bold')

plt.savefig('workload_rate.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q20(a, b, c, d, e, and f)- performance rate of students"""

#identifying rate values of the perfomance of the students
Q20_performance = final_dts

Q20a = Q20_performance ['Q20a']
Q20a_data = pd.DataFrame(Q20a)
Q20a_result = Q20a_data.value_counts(sort=False)
print(Q20a_result)

Q20b = Q20_performance ['Q20b']
Q20b_data = pd.DataFrame(Q20b)
Q20b_result = Q20b_data.value_counts(sort=False)
print(Q20b_result)

Q20c = Q20_performance ['Q20c']
Q20c_data = pd.DataFrame(Q20c)
Q20c_result = Q20c_data.value_counts(sort=False)
print(Q20c_result)

Q20d = Q20_performance ['Q20d']
Q20d_data = pd.DataFrame(Q20d)
Q20d_result = Q20d_data.value_counts(sort=False)
print(Q20d_result)

Q20e = Q20_performance ['Q20e']
Q20e_data = pd.DataFrame(Q20e)
Q20e_result = Q20e_data.value_counts(sort=False)
print(Q20e_result)

Q20f = Q20_performance ['Q20f']
Q20f_data = pd.DataFrame(Q20f)
Q20f_result = Q20f_data.value_counts(sort=False)
print(Q20f_result)

performance_rate = ['Strongly Disagree', 'Disagree', 'Natural', 'Agree', 'Strongly Agree']
perf_statement_results = {
    'It is more difficult for me to focus during online teaching in comparison to on-site teaching.': [55,65,135,1135,210],
    'My performance as a student has improved since on-site classes were canceled.': [111,212,1134,114,29],
    'My performance as a student has worsened since on-site classes were canceled.': [46,128,1131,194,101],
    'I have adapted well to the new teaching and learning experience.': [59,102,1155,216,68],
    'I can master the skills taught in class this year even if on-site classes were canceled.': [57,162,1183,166,32],
    'I can figure out how to do the most difficult classwork since on-site classes were canceled.': [54,129,1201,180,36],
}

def questionnaire_prs(perf_statement_results, performance_rate):
    labels = list(perf_statement_results.keys())
    data = np.array(list(perf_statement_results.values()))
    data_cum = data.cumsum(axis=1)
    middle_index = data.shape[1]//2
    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index]/2

    # Color Mapping
    category_colors = plt.get_cmap('coolwarm_r')(np.linspace(0.19, 0.9, data.shape[1]))
    
    fig, ax = plt.subplots(figsize=(11.5,5))
    
    # Plot Bars
    for i, (colname, color) in enumerate(zip(performance_rate, category_colors)):
        widths = data[:, i]
        starts = data_cum[:, i] - widths - offsets
        rects = ax.barh(labels, widths, left=starts, height=0.8,
                        label=colname, color=color)
    
    # Add Zero Reference Line
    ax.axvline(0, linestyle='--', color='black', alpha=0.5)
    
    # X Axis
    ax.set_xlim(-1500, 1500)
    ax.set_xticks(np.arange(-1500, 1501, 300))
    
    # Y Axis
    ax.invert_yaxis()
    
    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    ax.yaxis.grid(False)
    ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
    ax.set_axisbelow(True)
    
    # Legend
    ax.legend(ncol=len(performance_rate), bbox_to_anchor=(0.5,-0.28), loc='lower center', fontsize=12)
    
    #Title and xy-labels
    ax.set_title('Performance Rate of Students', loc='center', fontsize=18, fontweight='bold')
    ax.set_ylabel('Statements', fontsize=14)
    ax.set_xlabel('Responses', fontsize=14)

    # Set Background Color
    fig.set_facecolor('#FFFFFF')

    return fig, ax

fig, ax = questionnaire_prs(perf_statement_results, performance_rate)

plt.savefig('performance_rate.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q21(c and i)- access rate on computer and good internet connection

"""

Q21c_df = final_dts["Q21c"]
df_Q21c = pd.DataFrame(Q21c_df)
df_Q21c.info()

Q21c_data1 = df_Q21c.loc[lambda df_Q21c: df_Q21c['Q21c'] == 1]
Q21c_count1 = Q21c_data1.value_counts()
Q21c_never = Q21c_count1.tolist()

Q21c_data2 = df_Q21c.loc[lambda df_Q21c: df_Q21c['Q21c'] == 2]
Q21c_count2 = Q21c_data2.value_counts()
Q21c_rarely = Q21c_count2.tolist()

Q21c_data3 = df_Q21c.loc[lambda df_Q21c: df_Q21c['Q21c'] == 3]
Q21c_count3 = Q21c_data3.value_counts()
Q21c_sometimes = Q21c_count3.tolist()

Q21c_data4 = df_Q21c.loc[lambda df_Q21c: df_Q21c['Q21c'] == 4]
Q21c_count4 = Q21c_data4.value_counts()
Q21c_often = Q21c_count4.tolist()

Q21c_data5 = df_Q21c.loc[lambda df_Q21c: df_Q21c['Q21c'] == 5]
Q21c_count5 = Q21c_data5.value_counts()
Q21c_always = Q21c_count5.tolist()

Q21c_final = Q21c_never + Q21c_rarely + Q21c_sometimes + Q21c_often + Q21c_always
print(Q21c_final)

fig, ax = plt.subplots(figsize=(13,7))
plt.ylim(0, 1400)
plt.yticks(np.arange(0, 1401, 200))

labels = ["Never", "Rarely", "Sometimes", "Often", "Always"]

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(True)

ax.yaxis.grid(True, which='major', color='grey', linestyle='dotted')
ax.xaxis.grid(False)
ax.set_axisbelow(True)

Q21c = ax.bar(labels, Q21c_final, color = ['#FFB380', '#FFA466', '#FF954D', '#FF8533', '#FF7619'], width=0.9)

plt.xlabel("Rate", fontsize=12)
plt.ylabel("Responses", fontsize=12)  
plt.title("Students' Access Rate on Computer", fontsize=18, fontweight='bold')

plt.savefig('access_rate_computer.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

Q21i_df = final_dts["Q21i"]
df_Q21i = pd.DataFrame(Q21i_df)
df_Q21i.info()

Q21i_data1 = df_Q21i.loc[lambda df_Q21i: df_Q21i['Q21i'] == 1]
Q21i_count1 = Q21i_data1.value_counts()
Q21i_never = Q21i_count1.tolist()

Q21i_data2 = df_Q21i.loc[lambda df_Q21i: df_Q21i['Q21i'] == 2]
Q21i_count2 = Q21i_data2.value_counts()
Q21i_rarely = Q21i_count2.tolist()

Q21i_data3 = df_Q21i.loc[lambda df_Q21i: df_Q21i['Q21i'] == 3]
Q21i_count3 = Q21i_data3.value_counts()
Q21i_sometimes = Q21i_count3.tolist()

Q21i_data4 = df_Q21i.loc[lambda df_Q21i: df_Q21i['Q21i'] == 4]
Q21i_count4 = Q21i_data4.value_counts()
Q21i_often = Q21i_count4.tolist()

Q21i_data5 = df_Q21i.loc[lambda df_Q21i: df_Q21i['Q21i'] == 5]
Q21i_count5 = Q21i_data5.value_counts()
Q21i_always = Q21i_count5.tolist()

Q21i_final = Q21i_never + Q21i_rarely + Q21i_sometimes + Q21i_often + Q21i_always
print(Q21i_final)

fig, ax = plt.subplots(figsize=(13,7))
plt.ylim(0, 1200)
plt.yticks(np.arange(0, 1201, 200))

labels = ["Never", "Rarely", "Sometimes", "Often", "Always"]

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(True)

ax.yaxis.grid(True, which='major', color='grey', linestyle='dotted')
ax.xaxis.grid(False)
ax.set_axisbelow(True)

Q21i = ax.bar(labels, Q21i_final, color = ['#FF998B', '#FF7E72', '#E36359', '#C44841', '#A62C2B'], width=0.9)

plt.xlabel("Rate", fontsize=12)
plt.ylabel("Responses", fontsize=12)  
plt.title("Students' Access Rate on Good Internet Connection", fontsize=18, fontweight='bold')

plt.savefig('access_rate_internet.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q22(a and b)- rate about browsing online information and sharing digital content"""

Q22_online_performance = final_dts

Q22a = Q22_online_performance ['Q22a']
Q22a_data = pd.DataFrame(Q22a)
Q22a_result = Q22a_data.value_counts(sort=False)
print(Q22a_result)

Q22b = Q22_online_performance ['Q22b']
Q22b_data = pd.DataFrame(Q22b)
Q22b_result = Q22b_data.value_counts(sort=False)
print(Q22b_result)

browse_share_performance_rate = ['Strongly Disagree', 'Disagree', 'Natural', 'Agree', 'Strongly Agree']
br_sh_statement_results = {
    'Browsing online information.': [31,53,173,1179,164],
    'Sharing digital content.': [27,56,203,1170,144],
}

def questionnaire_br_sh(br_sh_statement_results, browse_share_performance_rate):
    labels = list(br_sh_statement_results.keys())
    data = np.array(list(br_sh_statement_results.values()))
    data_cum = data.cumsum(axis=1)
    middle_index = data.shape[1]//2
    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index]/2

    # Color Mapping
    category_colors = plt.get_cmap('coolwarm_r')(np.linspace(0.19, 0.9, data.shape[1]))
    
    fig, ax = plt.subplots(figsize=(13,1.5))
    
    # Plot Bars
    for i, (colname, color) in enumerate(zip(browse_share_performance_rate, category_colors)):
        widths = data[:, i]
        starts = data_cum[:, i] - widths - offsets
        rects = ax.barh(labels, widths, left=starts, height=0.7,
                        label=colname, color=color)
    
    # Add Zero Reference Line
    ax.axvline(0, linestyle='--', color='black', alpha=0.5)
    
    # X Axis
    ax.set_xlim(-1500, 1500)
    ax.set_xticks(np.arange(-1500, 1501, 300))
    
    # Y Axis
    ax.invert_yaxis()
    
    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    ax.yaxis.grid(False)
    ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
    ax.set_axisbelow(True)
    
    # Legend
    ax.legend(ncol=len(browse_share_performance_rate), bbox_to_anchor=(0.5,-0.9), loc='lower center', fontsize=11)
    
    #Title and xy-labels
    ax.set_title('Computer Skills Confidence Rate of Students', loc='center', fontsize=18, fontweight='bold')
    ax.set_ylabel('Statements', fontsize=11)
    ax.set_xlabel('Responses', fontsize=11)

    # Set Background Color
    fig.set_facecolor('#FFFFFF')

    return fig, ax

fig, ax = questionnaire_br_sh(br_sh_statement_results, browse_share_performance_rate)

plt.savefig('computer_skills_rate.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""#Q23- communication with other people rate (social life)

Dataframe of Q23
"""

q23_df = final_dts[['Q23a', 'Q23b', 'Q23c', 'Q23d', 'Q23e', 'Q23f', 'Q23g', 'Q23h', 'Q23i', 'Q23j']]
q23_df

q23_summary_df = aggregate_q25(q23_df, **q23_scale_dict)
q23_summary_df

params_dict = {
    'title': 'Rate of Communication with Other People',
}

fig, ax = plt.subplots()
fig.set_size_inches(16, 6, forward=True)
diverging_stacked_plotter(ax, q23_summary_df, q23_scale_list, q23_labels, **params_dict)
plt.savefig('communication_other_people.png', bbox_inches='tight', pad_inches=0.5)

"""# Q24b- the person that will be there for you if you felt down or depressed and wanted to talk about it"""

Q24b_persons = final_dts

Q24b = Q24b_persons ['Q24b']
Q24b_data = pd.DataFrame(Q24b)
Q24b_result = Q24b_data.value_counts(sort=True)
print(Q24b_result)

#responses that have low values (<23) are all grouped to 'Others'. it is consists of voluntary organizations, administrative staff, 
#lecturer, neighbors, colleague from my course, social networks, and more distant family member.

person = ['Others','Someone I live with','No one','Close friend','Close family member']

bar_width=0.9
# getting values against each value of y
result = [74,23,81,388,1034]

fig, ax = plt.subplots(figsize=(13,7))
plt.barh(person, result, color='#00A88F', height=bar_width)

plt.xlim(0, 1100)
plt.xticks(np.arange(0, 1101, 100))

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(True)
ax.spines['bottom'].set_visible(False)

ax.yaxis.grid(False)
ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
ax.set_axisbelow(True)

# setting labels
plt.ylabel("Persons", fontsize=12)
plt.xlabel("Responses", fontsize=12)
plt.title("Rate of Person there for you if you felt Down or Depressed", loc='center', fontsize=18, fontweight='bold')

plt.savefig('person_there_when_down.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q25(a, b, c, d, e, f, g, h, i, and j)- rate of emotions felt"""

Q25_emotions = final_dts

Q25a_joyful = Q25_emotions ['Q25a']
Q25a_data = pd.DataFrame(Q25a_joyful)
Q25a_result = Q25a_data.value_counts(sort=False)
print(Q25a_result)

Q25b_hopeful = Q25_emotions ['Q25b']
Q25b_data = pd.DataFrame(Q25b_hopeful)
Q25b_result = Q25b_data.value_counts(sort=False)
print(Q25b_result)

Q25c_proud = Q25_emotions ['Q25c']
Q25c_data = pd.DataFrame(Q25c_proud)
Q25c_result = Q25c_data.value_counts(sort=False)
print(Q25c_result)

Q25d_frustrated = Q25_emotions ['Q25d']
Q25d_data = pd.DataFrame(Q25d_frustrated)
Q25d_result = Q25d_data.value_counts(sort=False)
print(Q25d_result)

Q25e_angry = Q25_emotions ['Q25e']
Q25e_data = pd.DataFrame(Q25e_angry)
Q25e_result = Q25e_data.value_counts(sort=False)
print(Q25e_result)

Q25f_anxious = Q25_emotions ['Q25f']
Q25f_data = pd.DataFrame(Q25f_anxious)
Q25f_result = Q25f_data.value_counts(sort=False)
print(Q25f_result)

Q25g_ashamed = Q25_emotions ['Q25g']
Q25g_data = pd.DataFrame(Q25g_ashamed)
Q25g_result = Q25g_data.value_counts(sort=False)
print(Q25g_result)

Q25h_relieved = Q25_emotions ['Q25h']
Q25h_data = pd.DataFrame(Q25h_relieved)
Q25h_result = Q25h_data.value_counts(sort=False)
print(Q25h_result)

Q25i_hopeless = Q25_emotions ['Q25i']
Q25i_data = pd.DataFrame(Q25i_hopeless)
Q25i_result = Q25i_data.value_counts(sort=False)
print(Q25i_result)

Q25j_bored = Q25_emotions ['Q25j']
Q25j_data = pd.DataFrame(Q25j_bored)
Q25j_result = Q25j_data.value_counts(sort=False)
print(Q25j_result)

emotion_rate = ['Never', 'Rarely', 'Sometimes', 'Often', 'Always']
emotion_results = {
    'Joyful': [168,193,986,181,72],
    'Hopeful': [79,152,951,222,196],
    'Proud': [182,185,937,156,140],
    'Frustrated': [113,187,995,207,98],
    'Angry': [130,224,986,184,76],
    'Anxious': [122,174,972,208,124],
    'Ashamed': [1034,238,225,76,27],
    'Relieved': [142,211,1052,138,57],
    'Hopeless': [257,210,940,134,59],
    'Bored': [81,113,931,250,225],
}

def questionnaire_emotion(emotion_results, emotion_rate):
    labels = list(emotion_results.keys())
    data = np.array(list(emotion_results.values()))
    data_cum = data.cumsum(axis=1)
    middle_index = data.shape[1]//2
    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index]/2

    # Color Mapping
    category_colors = plt.get_cmap('coolwarm_r')(np.linspace(0.19, 0.9, data.shape[1]))
    
    fig, ax = plt.subplots(figsize=(18,5))
    
    # Plot Bars
    for i, (colname, color) in enumerate(zip(emotion_rate, category_colors)):
        widths = data[:, i]
        starts = data_cum[:, i] - widths - offsets
        rects = ax.barh(labels, widths, left=starts, height=0.8,
                        label=colname, color=color)
    
    # Add Zero Reference Line
    ax.axvline(0, linestyle='--', color='black', alpha=0.5)
    
    # X Axis
    ax.set_xlim(-1500, 1500)
    ax.set_xticks(np.arange(-1500, 1501, 300))
    
    # Y Axis
    ax.invert_yaxis()
    
    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    ax.yaxis.grid(False)
    ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
    ax.set_axisbelow(True)

    # Legend
    ax.legend(ncol=len(emotion_rate), bbox_to_anchor=(0.5,-0.29), loc='lower center', fontsize=12)
    
    #Title and xy-labels
    ax.set_title('Emotion Rate felt by College Students', loc='center', fontsize=18, fontweight='bold')
    ax.set_ylabel('Emotions', fontsize=13)
    ax.set_xlabel('Responses', fontsize=13)

    # Set Background Color
    fig.set_facecolor('#FFFFFF')

    return fig, ax

fig, ax = questionnaire_emotion(emotion_results, emotion_rate)

plt.savefig('emotion_rate.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q26b- personal mental health rate"""

Q26_personal_mental_health = final_dts

Q26b_mental_health_rate = Q26_personal_mental_health ['Q26b']
Q26b_data = pd.DataFrame(Q26b_mental_health_rate)
Q26b_result = Q26b_data.value_counts(sort=False)
print(Q26b_result)

# setting concern rate values at x axis
mental_health_rate=['A little of the time', 'Some of the time', 'A good part of the time', 'Most of the time', 'All of the time']

# giving the values against each value at y axis
mental_health_result=[201,914,198,176,111]

fig, ax = plt.subplots(figsize=(13,7))
plt.bar(mental_health_rate, mental_health_result, color=['#62BEB6', '#0B9A8D', '#077368', '#034D44', '#002B24'], width=0.9)

plt.ylim(0, 1000)
plt.yticks(np.arange(0, 1001, 200))

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(True)

ax.yaxis.grid(True, which='major', color='grey', linestyle='dotted')
ax.xaxis.grid(False)
ax.set_axisbelow(True)
 
# setting labels
plt.xlabel("Rate", fontsize=12)
plt.ylabel("Responses", fontsize=12)  
plt.title("Personal Mental Health Concern Rate", loc='center', fontsize=18, fontweight='bold')

plt.savefig('mental_health_rate_arts.png', bbox_inches='tight', pad_inches=0.5)
plt.show()

"""# Q26(a, c, d, e, f, g, h, and i)- rate of other contributors to mental health namely physical health, studying issues, future education, personal finances, family relationship, professional career in future, pandemic crisis in future, and leisure activities"""

Q26_contributors = final_dts

Q26a_physical_health = Q26_contributors ['Q26a']
Q26a_data = pd.DataFrame(Q26a_physical_health)
Q26a_result = Q26a_data.value_counts(sort=False)
print(Q26a_result)

Q26c_studying_issues = Q26_contributors ['Q26c']
Q26c_data = pd.DataFrame(Q26c_studying_issues)
Q26c_result = Q26c_data.value_counts(sort=False)
print(Q26c_result)

Q26d_future_education = Q26_contributors ['Q26d']
Q26d_data = pd.DataFrame(Q26d_future_education)
Q26d_result = Q26d_data.value_counts(sort=False)
print(Q26d_result)

Q26e_personal_finances = Q26_contributors ['Q26e']
Q26e_data = pd.DataFrame(Q26e_personal_finances)
Q26e_result = Q26e_data.value_counts(sort=False)
print(Q26e_result)

Q26f_family_relationship = Q26_contributors ['Q26f']
Q26f_data = pd.DataFrame(Q26f_family_relationship)
Q26f_result = Q26f_data.value_counts(sort=False)
print(Q26f_result)

Q26g_future_professional_career = Q26_contributors ['Q26g']
Q26g_data = pd.DataFrame(Q26g_future_professional_career)
Q26g_result = Q26g_data.value_counts(sort=False)
print(Q26g_result)

Q26h_future_pandemic_crisis = Q26_contributors ['Q26h']
Q26h_data = pd.DataFrame(Q26h_future_pandemic_crisis)
Q26h_result = Q26h_data.value_counts(sort=False)
print(Q26h_result)

Q26i_leisure_activities = Q26_contributors ['Q26i']
Q26i_data = pd.DataFrame(Q26i_leisure_activities)
Q26i_result = Q26i_data.value_counts(sort=False)
print(Q26i_result)

contributors_rate = ['A little of the time', 'Some of the time', 'A good part of the time', 'Most of the time', 'All of the time']
contrib_statement_results = {
    'Personal physical health': [204,947,212,158,79],
    'Studying issues': [93,218,209,934,146],
    'Future education': [92,182,219,928,179],
    'Personal finances': [195,867,182,185,147],
    'Family relationships': [180,867,199,183,171],
    'Professional career in the future': [100,180,217,915,188],
    'COVID-19 or similar pandemic crisis in the future': [183,930,179,195,113],
    'Leisure activities': [171,237,908,186,98],
}

def contributors_mh(contrib_statement_results, contributors_rate):
    labels = list(contrib_statement_results.keys())
    data = np.array(list(contrib_statement_results.values()))
    data_cum = data.cumsum(axis=1)
    middle_index = data.shape[1]//2
    offsets = data[:, range(middle_index)].sum(axis=1) + data[:, middle_index]/2

    # Color Mapping
    category_colors = plt.get_cmap('coolwarm_r')(np.linspace(0.19, 0.9, data.shape[1]))
    
    fig, ax = plt.subplots(figsize=(15,5.5))
    
    # Plot Bars
    for i, (colname, color) in enumerate(zip(contributors_rate, category_colors)):
        widths = data[:, i]
        starts = data_cum[:, i] - widths - offsets
        rects = ax.barh(labels, widths, left=starts, height=0.8,
                        label=colname, color=color)
    
    # Add Zero Reference Line
    ax.axvline(0, linestyle='--', color='black', alpha=0.5)
    
    # X Axis
    ax.set_xlim(-1500, 1500)
    ax.set_xticks(np.arange(-1500, 1501, 300))
    
    # Y Axis
    ax.invert_yaxis()
    
    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    ax.yaxis.grid(False)
    ax.xaxis.grid(True, which='major', color='grey', linestyle='dotted')
    ax.set_axisbelow(True)
    
    # Legend
    ax.legend(ncol=len(contributors_rate), bbox_to_anchor=(0.5,-0.28), loc='lower center', fontsize=12)
    
    #Title and xy-labels
    ax.set_title('Rate of Concern on the Various Contributors to Mental Health', loc='center', fontsize=18, fontweight='bold')
    ax.set_ylabel('Statements', fontsize=13)
    ax.set_xlabel('Responses', fontsize=13)

    # Set Background Color
    fig.set_facecolor('#FFFFFF')

    return fig, ax

fig, ax = contributors_mh(contrib_statement_results, contributors_rate)

plt.savefig('contributors_rate.png', bbox_inches='tight', pad_inches=0.5)
plt.show()